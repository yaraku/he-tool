name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  POETRY_VERSION: 1.7.1
  PIP_CACHE_DIR: ~/.cache/pip

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install Poetry
        run: |
          pip install --upgrade "poetry==${POETRY_VERSION}"
          poetry config virtualenvs.create false

      - name: Install dependencies
        working-directory: backend
        run: poetry install --with dev --no-interaction --no-root

      - name: Run Black (check mode)
        working-directory: backend
        run: poetry run black --check src tests

      - name: Run isort (check mode)
        working-directory: backend
        run: poetry run isort --check-only src tests

      - name: Run Flake8
        working-directory: backend
        run: poetry run flake8 src tests

  mypy:
    name: Static Typing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install Poetry
        run: |
          pip install --upgrade "poetry==${POETRY_VERSION}"
          poetry config virtualenvs.create false

      - name: Install dependencies
        working-directory: backend
        run: poetry install --with dev --no-interaction --no-root

      - name: Run mypy
        working-directory: backend
        run: poetry run mypy src tests

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install Poetry
        run: |
          pip install --upgrade "poetry==${POETRY_VERSION}"
          poetry config virtualenvs.create false

      - name: Install dependencies
        working-directory: backend
        run: poetry install --with dev --no-interaction --no-root

      - name: Run pytest
        working-directory: backend
        run: poetry run pytest --junitxml=pytest-results.xml --cov=human_evaluation_tool --cov-report=term-missing

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: backend/.coverage
          if-no-files-found: ignore

      - name: Upload pytest results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: backend/pytest-results.xml

      - name: Publish Unit Test Results
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        with:
          files: backend/pytest-results.xml
